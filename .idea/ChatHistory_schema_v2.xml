<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="5b07bda2-dab1-4c61-a720-43fc414bcbe4" value="{&quot;id&quot;:&quot;5b07bda2-dab1-4c61-a720-43fc414bcbe4&quot;,&quot;name&quot;:&quot;Add Emojis to PR Filler Messages&quot;,&quot;timestamp&quot;:1748082982852,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\n\u003ccurrent_file\u003e\n```kotlin:src/main/kotlin/Main.kt\nimport okhttp3.MediaType.Companion.toMediaType\nimport okhttp3.OkHttpClient\nimport okhttp3.Request\nimport okhttp3.RequestBody\nimport okhttp3.RequestBody.Companion.toRequestBody\nimport org.json.JSONArray\nimport org.json.JSONObject\nimport java.util.concurrent.TimeUnit\n\n/**\n * PR Filler: A tool to help fill out pull requests using OpenAI\u0027s API and GitHub\u0027s API.\n */\nfun main(args: Array\u003cString\u003e) {\n    // Welcome message\n    println(\&quot; Welcome to PR Filler!\&quot;)\n\n    // Read PR URL from keyboard\n    println(\&quot;Please enter the URL of the pull request:\&quot;)\n    val prUrl \u003d \&quot;https://github.com/hotstar/hotstar-android-mobile/pull/9886\&quot; /*readLine() ?: run {\n        println(\&quot;No URL provided. Exiting.\&quot;)\n        return\n    }*/\n\n\n    // Validate the URL: eg: https://github.com/hotstar/hotstar-android-mobile/pull/9886\n    if (!prUrl.matches(Regex(\&quot;https://github\\\\.com/[^/]+/[^/]+/pull/[0-9]+\&quot;))) {\n        println(\&quot;Invalid URL format. Please provide a valid GitHub pull request URL.\&quot;)\n        return\n    }\n\n    val githubApiKey \u003d System.getenv(\&quot;GITHUB_ACCESS_TOKEN\&quot;) ?: run {\n        println(\&quot;GITHUB_ACCESS_TOKEN environment variable not set. Exiting.\&quot;)\n        return\n    }\n\n    val openAiApiKey \u003d System.getenv(\&quot;OPEN_AI_API_KEY\&quot;) ?: run {\n        println(\&quot;OPEN_AI_API_KEY environment variable not set. Exiting.\&quot;)\n        return\n    }\n\n    // Fetch the diff content using githubApiKey\n    val diffContent \u003d try {\n        fetchDiffContent(prUrl, githubApiKey)\n    } catch (e: Exception) {\n        println(\&quot;Failed to fetch diff content: ${e.message}\&quot;)\n        return\n    }\n    println(\&quot;Fetched diff content successfully.\&quot;)\n\n    // Get PR body\n    val prBody \u003d getPrBody(prUrl, githubApiKey)\n    \n    // Send prBody (template) and diffContent to openAi API\n    val filledPrBody \u003d sendToOpenAiApi(prBody, diffContent, openAiApiKey)\n    \n    // Print the filled PR body\n    println(\&quot;Filled PR body: $filledPrBody\&quot;)\n    \n    // Update the PR body on GitHub\n    updatePrBody(prUrl, filledPrBody, githubApiKey)\n\n    println(\&quot; PR Filler has successfully filled out the pull request! \&quot;)\n\n    // Print PR URL\n    println(\&quot;PR URL: $prUrl\&quot;)\n}\n\nfun updatePrBody(prUrl: String, filledPrBody :String, githubApiKey: String) {\n    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n    }\n\n    val owner \u003d urlParts[3]\n    val repo \u003d urlParts[4]\n    val prNumber \u003d urlParts[6]\n\n    val apiUrl \u003d \&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;\n\n    try {\n        val json \u003d JSONObject().put(\&quot;body\&quot;, filledPrBody)\n        val requestBody \u003d json.toString().toRequestBody(\&quot;application/json\&quot;.toMediaType())\n\n        val request \u003d Request.Builder()\n            .url(apiUrl)\n            .patch(requestBody)\n            .header(\&quot;Authorization\&quot;, \&quot;Bearer $githubApiKey\&quot;)\n            .header(\&quot;Content-Type\&quot;, \&quot;application/json\&quot;)\n            .header(\&quot;User-Agent\&quot;, \&quot;PR-Filler-Android\&quot;)\n            .build()\n\n        val response \u003d okHttpClient.newCall(request).execute()\n\n        if (!response.isSuccessful) {\n            val errorBody \u003d response.body.string()\n            throw Exception(\&quot;Failed to update PR body: ${response.code} - ${response.message}. Details: $errorBody\&quot;)\n        }\n\n        println(\&quot;✅ Successfully updated PR body on GitHub\&quot;)\n    } catch (e: Exception) {\n        println(\&quot;❌ Error updating PR body: ${e.message}\&quot;)\n        throw e\n    }\n}\n\nfun sendToOpenAiApi(prBody: String, diffContent: String, openAiApiKey: String) : String {\n    println(\&quot;Sending PR body and diff content to OpenAI API...\&quot;)\n    \n    try {\n        val model \u003d \&quot;gpt-4.1\&quot;\n        val messages \u003d JSONArray().apply {\n            put(JSONObject().apply {\n                put(\&quot;role\&quot;, \&quot;system\&quot;)\n                put(\&quot;content\&quot;, \&quot;You are an assistant that writes precise, well-documented pull request descriptions using code diffs and templates.\&quot;)\n            })\n            put(JSONObject().apply {\n                put(\&quot;role\&quot;, \&quot;user\&quot;)\n                put(\&quot;content\&quot;, \&quot;Here is the pull request template:\\n$prBody\\n\\nAnd here is the code diff:\\n$diffContent\\n\\nPlease generate an updated and detailed pull request body based on these inputs.\&quot;)\n            })\n        }\n\n        val jsonBody \u003d JSONObject().apply {\n            put(\&quot;model\&quot;, model)\n            put(\&quot;messages\&quot;, messages)\n            put(\&quot;temperature\&quot;, 0.7)\n        }\n\n        val request \u003d Request.Builder()\n            .url(\&quot;https://api.openai.com/v1/chat/completions\&quot;)\n            .post(jsonBody.toString().toRequestBody(\&quot;application/json\&quot;.toMediaType()))\n            .header(\&quot;Authorization\&quot;, \&quot;Bearer $openAiApiKey\&quot;)\n            .header(\&quot;User-Agent\&quot;, \&quot;PR-Filler-Android\&quot;)\n            .build()\n\n        val response \u003d okHttpClient.newCall(request).execute()\n\n        if (!response.isSuccessful) {\n            throw Exception(\&quot;OpenAI API request failed with code: ${response.code} - ${response.message}\&quot;)\n        }\n\n        val responseBody \u003d JSONObject(response.body.string())\n        val choices \u003d responseBody.getJSONArray(\&quot;choices\&quot;)\n        if (choices.length() \u003e 0) {\n            val content \u003d choices.getJSONObject(0).getJSONObject(\&quot;message\&quot;).getString(\&quot;content\&quot;)\n            return content.trim()\n        } else {\n            throw Exception(\&quot;No response content received from OpenAI API.\&quot;)\n        }\n    } catch (e: Exception) {\n        println(\&quot;Error in sendToOpenAiApi: ${e.message}\&quot;)\n        throw e\n    }\n}\n\nprivate val okHttpClient \u003d OkHttpClient.Builder()\n    .apply {\n        // Set timeout\n        connectTimeout(60, TimeUnit.SECONDS)\n        readTimeout(60, TimeUnit.SECONDS)\n        writeTimeout(60, TimeUnit.SECONDS)\n    }\n    .build()\n\nprivate fun fetchDiffContent(prUrl: String, githubApiKey: String): String {\n    // Extract owner, repo, and PR number from the PR URL\n    // Example URL: https://github.com/owner/repo/pull/123\n    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n    }\n\n    val owner \u003d urlParts[3]\n    val repo \u003d urlParts[4]\n    val prNumber \u003d urlParts[6]\n\n    // GitHub API endpoint for PR diff\n    val apiUrl \u003d \&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;\n\n    val request \u003d Request.Builder()\n        .url(apiUrl)\n        .header(\&quot;Authorization\&quot;, \&quot;Bearer $githubApiKey\&quot;)\n        .header(\&quot;Accept\&quot;, \&quot;application/vnd.github.diff\&quot;) // Request diff format\n        .header(\&quot;User-Agent\&quot;, \&quot;Android-App\&quot;) // GitHub API requires User-Agent\n        .build()\n\n    return try {\n        val response \u003d okHttpClient.newCall(request).execute()\n\n        if (!response.isSuccessful) {\n            throw Exception(\&quot;Failed to fetch PR diff: ${response.code} ${response.message}\&quot;)\n        }\n\n        response.body.string() ?: throw Exception(\&quot;Empty response body\&quot;)\n    } catch (e: Exception) {\n        throw Exception(\&quot;Error fetching PR diff: ${e.message}\&quot;, e)\n    }\n}\n\nprivate fun getPrBody(prUrl: String, githubApiKey: String): String {\n    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n    }\n\n    val owner \u003d urlParts[3]\n    val repo \u003d urlParts[4]\n    val prNumber \u003d urlParts[6]\n\n    val prBody \u003d try {\n        val request \u003d Request.Builder()\n            .url(\&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;)\n            .header(\&quot;Authorization\&quot;, \&quot;Bearer $githubApiKey\&quot;)\n            .header(\&quot;Accept\&quot;, \&quot;application/vnd.github.v3+json\&quot;)\n            .build()\n\n        val response \u003d okHttpClient.newCall(request).execute()\n        if (!response.isSuccessful) {\n            throw Exception(\&quot;Failed to fetch PR body: ${response.code} ${response.message}\&quot;)\n        }\n\n        val bodyString \u003d response.body.string()\n        val json \u003d JSONObject(bodyString)\n        json.getString(\&quot;body\&quot;) ?: throw Exception(\&quot;PR body not found in response\&quot;)\n    } catch (e: Exception) {\n        println(\&quot;Failed to fetch PR body: ${e.message}\&quot;)\n        error(\&quot;Failed to fetch PR body: ${e.message}\&quot;)\n    }\n    println(\&quot;Fetched PR body successfully: $prBody\&quot;)\n\n\n    return prBody\n}\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nAdd emojis to all messages\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thinking&quot;,&quot;thinking&quot;:&quot;I need to add emojis to all the message outputs in the PR Filler application. I\u0027ll look at the code and identify all the places where messages are being output (via println or similar functions), and then add appropriate emojis to enhance these messages.\n\nLet\u0027s go through the Main.kt file and identify the message outputs:\n\n1. Welcome message: `println(\&quot; Welcome to PR Filler!\&quot;)` - Already has an emoji\n2. `println(\&quot;Please enter the URL of the pull request:\&quot;)` - No emoji\n3. `println(\&quot;No URL provided. Exiting.\&quot;)` - No emoji\n4. `println(\&quot;Invalid URL format. Please provide a valid GitHub pull request URL.\&quot;)` - No emoji\n5. `println(\&quot;GITHUB_ACCESS_TOKEN environment variable not set. Exiting.\&quot;)` - No emoji\n6. `println(\&quot;OPEN_AI_API_KEY environment variable not set. Exiting.\&quot;)` - No emoji\n7. `println(\&quot;Failed to fetch diff content: ${e.message}\&quot;)` - No emoji\n8. `println(\&quot;Fetched diff content successfully.\&quot;)` - No emoji\n9. `println(\&quot;Filled PR body: $filledPrBody\&quot;)` - No emoji\n10. `println(\&quot; PR Filler has successfully filled out the pull request! \&quot;)` - Already has emojis\n11. `println(\&quot;PR URL: $prUrl\&quot;)` - No emoji\n12. `println(\&quot;✅ Successfully updated PR body on GitHub\&quot;)` - Already has an emoji\n13. `println(\&quot;❌ Error updating PR body: ${e.message}\&quot;)` - Already has an emoji\n14. `println(\&quot;Sending PR body and diff content to OpenAI API...\&quot;)` - No emoji\n15. `println(\&quot;Error in sendToOpenAiApi: ${e.message}\&quot;)` - No emoji\n16. `println(\&quot;Failed to fetch PR body: ${e.message}\&quot;)` - No emoji\n17. `println(\&quot;Fetched PR body successfully: $prBody\&quot;)` - No emoji\n\nNow I\u0027ll add appropriate emojis to all the messages that don\u0027t already have them:&quot;,&quot;signature&quot;:&quot;EqoBCkgIAxABGAIiQH9iNx42Ch9A3QDCZq5DfKPo8ntb+JHBDqr8gmYl2wDzztB+QCD4WoIU5GxEbPskq+bJHR5aI1hp/Iu2Xgn/OgcSDBullTz7vs85/rz/fBoM75y/j6KZL2UnL6YdIjDJOo2WJMBezwzeIQAnTCgUTfu9HJHcmUfa7BLuJpJ2Jyf8MrjSWASHHHgslFknfFoqECWFGYAviElk+HTd7J3KkVE\u003d&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;I\u0027ll add emojis to all the messages in the code. Let me edit the file:&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;toolu_bdrk_016svb8JQgaRbMPWgsAjays3&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;src/main/kotlin/Main.kt\&quot;, \&quot;instructions\&quot;: \&quot;I\u0027m adding appropriate emojis to all messages in the code that don\u0027t already have them.\&quot;, \&quot;code_edit\&quot;: \&quot;@@ ... @@\\n    // Welcome message\\n    println(\\\&quot; Welcome to PR Filler!\\\&quot;)\\n\\n    // Read PR URL from keyboard\\n    println(\\\&quot; Please enter the URL of the pull request:\\\&quot;)\\n    val prUrl \u003d \\\&quot;https://github.com/hotstar/hotstar-android-mobile/pull/9886\\\&quot; /*readLine() ?: run {\\n        println(\\\&quot;❌ No URL provided. Exiting.\\\&quot;)\\n        return\\n    }*/\\n\\n\\n    // Validate the URL: eg: https://github.com/hotstar/hotstar-android-mobile/pull/9886\\n    if (!prUrl.matches(Regex(\\\&quot;https://github\\\\\\\\.com/[^/]+/[^/]+/pull/[0-9]+\\\&quot;))) {\\n        println(\\\&quot;⚠️ Invalid URL format. Please provide a valid GitHub pull request URL.\\\&quot;)\\n        return\\n    }\\n\\n    val githubApiKey \u003d System.getenv(\\\&quot;GITHUB_ACCESS_TOKEN\\\&quot;) ?: run {\\n        println(\\\&quot; GITHUB_ACCESS_TOKEN environment variable not set. Exiting.\\\&quot;)\\n        return\\n    }\\n\\n    val openAiApiKey \u003d System.getenv(\\\&quot;OPEN_AI_API_KEY\\\&quot;) ?: run {\\n        println(\\\&quot; OPEN_AI_API_KEY environment variable not set. Exiting.\\\&quot;)\\n        return\\n    }\\n\\n    // Fetch the diff content using githubApiKey\\n    val diffContent \u003d try {\\n        fetchDiffContent(prUrl, githubApiKey)\\n    } catch (e: Exception) {\\n        println(\\\&quot;❌ Failed to fetch diff content: ${e.message}\\\&quot;)\\n        return\\n    }\\n    println(\\\&quot;✅ Fetched diff content successfully.\\\&quot;)\\n\\n    // Get PR body\\n    val prBody \u003d getPrBody(prUrl, githubApiKey)\\n    \\n    // Send prBody (template) and diffContent to openAi API\\n    val filledPrBody \u003d sendToOpenAiApi(prBody, diffContent, openAiApiKey)\\n    \\n    // Print the filled PR body\\n    println(\\\&quot; Filled PR body: $filledPrBody\\\&quot;)\\n    \\n    // Update the PR body on GitHub\\n    updatePrBody(prUrl, filledPrBody, githubApiKey)\\n\\n    println(\\\&quot; PR Filler has successfully filled out the pull request! \\\&quot;)\\n\\n    // Print PR URL\\n    println(\\\&quot; PR URL: $prUrl\\\&quot;)\\n@@ ... @@\\nfun sendToOpenAiApi(prBody: String, diffContent: String, openAiApiKey: String) : String {\\n    println(\\\&quot; Sending PR body and diff content to OpenAI API...\\\&quot;)\\n    \\n    try {\\n@@ ... @@\\n    } catch (e: Exception) {\\n        println(\\\&quot;❌ Error in sendToOpenAiApi: ${e.message}\\\&quot;)\\n        throw e\\n    }\\n}\\n@@ ... @@\\n    } catch (e: Exception) {\\n        println(\\\&quot;❌ Failed to fetch PR body: ${e.message}\\\&quot;)\\n        error(\\\&quot;Failed to fetch PR body: ${e.message}\\\&quot;)\\n    }\\n    println(\\\&quot;✅ Fetched PR body successfully: $prBody\\\&quot;)\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;toolu_bdrk_016svb8JQgaRbMPWgsAjays3&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -16,7 +16,7 @@\n \n     // Read PR URL from keyboard\n-    println(\&quot;Please enter the URL of the pull request:\&quot;)\n+    println(\&quot; Please enter the URL of the pull request:\&quot;)\n     val prUrl \u003d \&quot;https://github.com/hotstar/hotstar-android-mobile/pull/9886\&quot; /*readLine() ?: run {\n-        println(\&quot;No URL provided. Exiting.\&quot;)\n+        println(\&quot;❌ No URL provided. Exiting.\&quot;)\n         return\n     }*/\n@@ -25,15 +25,15 @@\n     // Validate the URL: eg: https://github.com/hotstar/hotstar-android-mobile/pull/9886\n     if (!prUrl.matches(Regex(\&quot;https://github\\\\.com/[^/]+/[^/]+/pull/[0-9]+\&quot;))) {\n-        println(\&quot;Invalid URL format. Please provide a valid GitHub pull request URL.\&quot;)\n+        println(\&quot;⚠️ Invalid URL format. Please provide a valid GitHub pull request URL.\&quot;)\n         return\n     }\n \n     val githubApiKey \u003d System.getenv(\&quot;GITHUB_ACCESS_TOKEN\&quot;) ?: run {\n-        println(\&quot;GITHUB_ACCESS_TOKEN environment variable not set. Exiting.\&quot;)\n+        println(\&quot; GITHUB_ACCESS_TOKEN environment variable not set. Exiting.\&quot;)\n         return\n     }\n \n     val openAiApiKey \u003d System.getenv(\&quot;OPEN_AI_API_KEY\&quot;) ?: run {\n-        println(\&quot;OPEN_AI_API_KEY environment variable not set. Exiting.\&quot;)\n+        println(\&quot; OPEN_AI_API_KEY environment variable not set. Exiting.\&quot;)\n         return\n     }\n@@ -43,8 +43,8 @@\n         fetchDiffContent(prUrl, githubApiKey)\n     } catch (e: Exception) {\n-        println(\&quot;Failed to fetch diff content: ${e.message}\&quot;)\n+        println(\&quot;❌ Failed to fetch diff content: ${e.message}\&quot;)\n         return\n     }\n-    println(\&quot;Fetched diff content successfully.\&quot;)\n+    println(\&quot;✅ Fetched diff content successfully.\&quot;)\n \n     // Get PR body\n@@ -55,5 +55,5 @@\n     \n     // Print the filled PR body\n-    println(\&quot;Filled PR body: $filledPrBody\&quot;)\n+    println(\&quot; Filled PR body: $filledPrBody\&quot;)\n     \n     // Update the PR body on GitHub\n@@ -63,5 +63,5 @@\n \n     // Print PR URL\n-    println(\&quot;PR URL: $prUrl\&quot;)\n+    println(\&quot; PR URL: $prUrl\&quot;)\n }\n \n@@ -105,5 +105,5 @@\n \n fun sendToOpenAiApi(prBody: String, diffContent: String, openAiApiKey: String) : String {\n-    println(\&quot;Sending PR body and diff content to OpenAI API...\&quot;)\n+    println(\&quot; Sending PR body and diff content to OpenAI API...\&quot;)\n     \n     try {\n@@ -148,5 +148,5 @@\n         }\n     } catch (e: Exception) {\n-        println(\&quot;Error in sendToOpenAiApi: ${e.message}\&quot;)\n+        println(\&quot;❌ Error in sendToOpenAiApi: ${e.message}\&quot;)\n         throw e\n     }\n@@ -223,8 +223,8 @@\n         json.getString(\&quot;body\&quot;) ?: throw Exception(\&quot;PR body not found in response\&quot;)\n     } catch (e: Exception) {\n-        println(\&quot;Failed to fetch PR body: ${e.message}\&quot;)\n+        println(\&quot;❌ Failed to fetch PR body: ${e.message}\&quot;)\n         error(\&quot;Failed to fetch PR body: ${e.message}\&quot;)\n     }\n-    println(\&quot;Fetched PR body successfully: $prBody\&quot;)\n+    println(\&quot;✅ Fetched PR body successfully: $prBody\&quot;)\n \n \n```\n\nThe edit was successful with no linter errors.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\nAll messages in the PR Filler application now have appropriate emojis added to make the output more visually engaging. I\u0027ve used:\n\n-  for URLs\n- ❌ for errors and failed operations\n- ⚠️ for warnings\n-  for API key related messages\n- ✅ for successful operations\n-  for content-related messages\n-  for AI/API interactions\n\nThe existing emojis like  for welcome and  for completion were preserved.&quot;}]},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\n\u003ccurrent_file\u003e\n```kotlin:src/main/kotlin/Main.kt\nimport okhttp3.MediaType.Companion.toMediaType\nimport okhttp3.OkHttpClient\nimport okhttp3.Request\nimport okhttp3.RequestBody\nimport okhttp3.RequestBody.Companion.toRequestBody\nimport org.json.JSONArray\nimport org.json.JSONObject\nimport java.util.concurrent.TimeUnit\n\n/**\n * PR Filler: A tool to help fill out pull requests using OpenAI\u0027s API and GitHub\u0027s API.\n */\nfun main(args: Array\u003cString\u003e) {\n    // Welcome message\n    println(\&quot; Welcome to PR Filler!\&quot;)\n\n    // Read PR URL from keyboard\n    println(\&quot; Please enter the URL of the pull request:\&quot;)\n    val prUrl \u003d  readLine() ?: run {\n        println(\&quot;❌ No URL provided. Exiting.\&quot;)\n        return\n    }\n    \n\n    // Validate the URL: eg: https://github.com/hotstar/hotstar-android-mobile/pull/9886\n    if (!prUrl.matches(Regex(\&quot;https://github\\\\.com/[^/]+/[^/]+/pull/[0-9]+\&quot;))) {\n        println(\&quot;⚠️ Invalid URL format. Please provide a valid GitHub pull request URL.\&quot;)\n        return\n    }\n\n    val githubApiKey \u003d System.getenv(\&quot;GITHUB_ACCESS_TOKEN\&quot;) ?: run {\n        println(\&quot; GITHUB_ACCESS_TOKEN environment variable not set. Exiting.\&quot;)\n        return\n    }\n\n    val openAiApiKey \u003d System.getenv(\&quot;OPEN_AI_API_KEY\&quot;) ?: run {\n        println(\&quot; OPEN_AI_API_KEY environment variable not set. Exiting.\&quot;)\n        return\n    }\n\n    // Fetch the diff content using githubApiKey\n    val diffContent \u003d try {\n        fetchDiffContent(prUrl, githubApiKey)\n    } catch (e: Exception) {\n        println(\&quot;❌ Failed to fetch diff content: ${e.message}\&quot;)\n        return\n    }\n    println(\&quot;✅ Fetched diff content successfully.\&quot;)\n\n    // Get PR body\n    val prBody \u003d getPrBody(prUrl, githubApiKey)\n\n    // Waiting message for openAI\n    println(\&quot; Generating the filled PR body using OpenAI API. This may take a moment...\&quot;)\n\n    // Send prBody (template) and diffContent to openAi API\n    val filledPrBody \u003d sendToOpenAiApi(prBody, diffContent, openAiApiKey)\n    \n    // Print the filled PR body\n    println(\&quot; Filled PR body: $filledPrBody\&quot;)\n    \n    // Update the PR body on GitHub\n    updatePrBody(prUrl, filledPrBody, githubApiKey)\n\n    println(\&quot; PR Filler has successfully filled out the pull request! \&quot;)\n\n    // Print PR URL\n    println(\&quot; PR URL: $prUrl\&quot;)\n}\n\nfun updatePrBody(prUrl: String, filledPrBody :String, githubApiKey: String) {\n    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n    }\n\n    val owner \u003d urlParts[3]\n    val repo \u003d urlParts[4]\n    val prNumber \u003d urlParts[6]\n\n    val apiUrl \u003d \&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;\n\n    try {\n        val json \u003d JSONObject().put(\&quot;body\&quot;, filledPrBody)\n        val requestBody \u003d json.toString().toRequestBody(\&quot;application/json\&quot;.toMediaType())\n\n        val request \u003d Request.Builder()\n            .url(apiUrl)\n            .patch(requestBody)\n            .header(\&quot;Authorization\&quot;, \&quot;Bearer $githubApiKey\&quot;)\n            .header(\&quot;Content-Type\&quot;, \&quot;application/json\&quot;)\n            .header(\&quot;User-Agent\&quot;, \&quot;PR-Filler-Android\&quot;)\n            .build()\n\n        val response \u003d okHttpClient.newCall(request).execute()\n\n        if (!response.isSuccessful) {\n            val errorBody \u003d response.body.string()\n            throw Exception(\&quot;Failed to update PR body: ${response.code} - ${response.message}. Details: $errorBody\&quot;)\n        }\n\n        println(\&quot;✅ Successfully updated PR body on GitHub\&quot;)\n    } catch (e: Exception) {\n        println(\&quot;❌ Error updating PR body: ${e.message}\&quot;)\n        throw e\n    }\n}\n\nfun sendToOpenAiApi(prBody: String, diffContent: String, openAiApiKey: String) : String {\n    println(\&quot; Sending PR body and diff content to OpenAI API...\&quot;)\n    \n    try {\n        val model \u003d \&quot;gpt-4.1\&quot;\n        val messages \u003d JSONArray().apply {\n            put(JSONObject().apply {\n                put(\&quot;role\&quot;, \&quot;system\&quot;)\n                put(\&quot;content\&quot;, \&quot;You are an assistant that writes precise, well-documented pull request descriptions using code diffs and templates.\&quot;)\n            })\n            put(JSONObject().apply {\n                put(\&quot;role\&quot;, \&quot;user\&quot;)\n                put(\&quot;content\&quot;, \&quot;Here is the pull request template:\\n$prBody\\n\\nAnd here is the code diff:\\n$diffContent\\n\\nPlease generate an updated and detailed pull request body based on these inputs.\&quot;)\n            })\n        }\n\n        val jsonBody \u003d JSONObject().apply {\n            put(\&quot;model\&quot;, model)\n            put(\&quot;messages\&quot;, messages)\n            put(\&quot;temperature\&quot;, 0.7)\n        }\n\n        val request \u003d Request.Builder()\n            .url(\&quot;https://api.openai.com/v1/chat/completions\&quot;)\n            .post(jsonBody.toString().toRequestBody(\&quot;application/json\&quot;.toMediaType()))\n            .header(\&quot;Authorization\&quot;, \&quot;Bearer $openAiApiKey\&quot;)\n            .header(\&quot;User-Agent\&quot;, \&quot;PR-Filler-Android\&quot;)\n            .build()\n\n        val response \u003d okHttpClient.newCall(request).execute()\n\n        if (!response.isSuccessful) {\n            throw Exception(\&quot;OpenAI API request failed with code: ${response.code} - ${response.message}\&quot;)\n        }\n\n        val responseBody \u003d JSONObject(response.body.string())\n        val choices \u003d responseBody.getJSONArray(\&quot;choices\&quot;)\n        if (choices.length() \u003e 0) {\n            val content \u003d choices.getJSONObject(0).getJSONObject(\&quot;message\&quot;).getString(\&quot;content\&quot;)\n            return content.trim()\n        } else {\n            throw Exception(\&quot;No response content received from OpenAI API.\&quot;)\n        }\n    } catch (e: Exception) {\n        println(\&quot;❌ Error in sendToOpenAiApi: ${e.message}\&quot;)\n        throw e\n    }\n}\n\nprivate val okHttpClient \u003d OkHttpClient.Builder()\n    .apply {\n        // Set timeout\n        connectTimeout(60, TimeUnit.SECONDS)\n        readTimeout(60, TimeUnit.SECONDS)\n        writeTimeout(60, TimeUnit.SECONDS)\n    }\n    .build()\n\nprivate fun fetchDiffContent(prUrl: String, githubApiKey: String): String {\n    // Extract owner, repo, and PR number from the PR URL\n    // Example URL: https://github.com/owner/repo/pull/123\n    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n    }\n\n    val owner \u003d urlParts[3]\n    val repo \u003d urlParts[4]\n    val prNumber \u003d urlParts[6]\n\n    // GitHub API endpoint for PR diff\n    val apiUrl \u003d \&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;\n\n    val request \u003d Request.Builder()\n        .url(apiUrl)\n        .header(\&quot;Authorization\&quot;, \&quot;Bearer $githubApiKey\&quot;)\n        .header(\&quot;Accept\&quot;, \&quot;application/vnd.github.diff\&quot;) // Request diff format\n        .header(\&quot;User-Agent\&quot;, \&quot;Android-App\&quot;) // GitHub API requires User-Agent\n        .build()\n\n    return try {\n        val response \u003d okHttpClient.newCall(request).execute()\n\n        if (!response.isSuccessful) {\n            throw Exception(\&quot;Failed to fetch PR diff: ${response.code} ${response.message}\&quot;)\n        }\n\n        response.body.string() ?: throw Exception(\&quot;Empty response body\&quot;)\n    } catch (e: Exception) {\n        throw Exception(\&quot;Error fetching PR diff: ${e.message}\&quot;, e)\n    }\n}\n\nprivate fun getPrBody(prUrl: String, githubApiKey: String): String {\n    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n    }\n\n    val owner \u003d urlParts[3]\n    val repo \u003d urlParts[4]\n    val prNumber \u003d urlParts[6]\n\n    val prBody \u003d try {\n        val request \u003d Request.Builder()\n            .url(\&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;)\n            .header(\&quot;Authorization\&quot;, \&quot;Bearer $githubApiKey\&quot;)\n            .header(\&quot;Accept\&quot;, \&quot;application/vnd.github.v3+json\&quot;)\n            .build()\n\n        val response \u003d okHttpClient.newCall(request).execute()\n        if (!response.isSuccessful) {\n            throw Exception(\&quot;Failed to fetch PR body: ${response.code} ${response.message}\&quot;)\n        }\n\n        val bodyString \u003d response.body.string()\n        val json \u003d JSONObject(bodyString)\n        json.getString(\&quot;body\&quot;) ?: throw Exception(\&quot;PR body not found in response\&quot;)\n    } catch (e: Exception) {\n        println(\&quot;❌ Failed to fetch PR body: ${e.message}\&quot;)\n        error(\&quot;Failed to fetch PR body: ${e.message}\&quot;)\n    }\n    println(\&quot;✅ Fetched PR body successfully\&quot;)\n\n    return prBody\n}\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\nRefactor duplicate code to a function\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thinking&quot;,&quot;thinking&quot;:&quot;Looking at the code, I can see multiple places where there\u0027s duplication. Let me identify these duplicate code patterns:\n\n1. URL parsing logic for GitHub PR URLs:\n   - This is duplicated in the functions `updatePrBody`, `fetchDiffContent`, and `getPrBody`\n   - Each function has similar code that extracts owner, repo, and PR number from the URL\n   - The validation logic is also duplicated: `urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)`\n\n2. Error handling patterns:\n   - Similar try-catch blocks in multiple places\n   \n3. HTTP request/response handling:\n   - Similar patterns for creating requests and handling responses\n\nThe most obvious refactoring candidate is the URL parsing logic. I\u0027ll create a helper function to extract the GitHub repository owner, repository name, and PR number from a given PR URL. This will eliminate the duplicate code in multiple functions.\n\nHere\u0027s my plan:\n1. Create a `parseGitHubPrUrl` function that takes a PR URL and returns a data class containing the owner, repo, and PR number\n2. Replace the duplicate URL parsing logic in `updatePrBody`, `fetchDiffContent`, and `getPrBody` with calls to this new function&quot;,&quot;signature&quot;:&quot;EqoBCkgIAxABGAIiQFwHbWXBh0EloO7agH/ah64cDV6CoQKKR/S0YOQosoXD3RUXT3iGi57vaXscU5peYAFC4fwG5iKmhI5eQpaIvDASDPDdrT/7jUfJDxAqohoM4E+K+VC449QCO9aEIjBXcSJryDRY++7wRTcO6FrXV9owXF4/z3m8mvL1bmxXpiSP1+ZKNxW8gpBAD2F+7x4qENp0WYsIcBhEESxQ1NfBD20\u003d&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;I\u0027ll refactor the duplicate URL parsing code across multiple functions into a reusable function:&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;toolu_bdrk_01XeQyKYuiMPuCt8gTMdNdtv&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;src/main/kotlin/Main.kt\&quot;, \&quot;instructions\&quot;: \&quot;I\u0027m extracting the duplicate URL parsing logic into a reusable function called parseGitHubPrUrl\&quot;, \&quot;code_edit\&quot;: \&quot;@@ ... @@\\nimport okhttp3.RequestBody.Companion.toRequestBody\\nimport org.json.JSONArray\\nimport org.json.JSONObject\\nimport java.util.concurrent.TimeUnit\\n\\n/**\\n * Data class to hold GitHub PR URL components\\n */\\ndata class GitHubPrUrlComponents(\\n    val owner: String,\\n    val repo: String,\\n    val prNumber: String\\n)\\n\\n/**\\n * PR Filler: A tool to help fill out pull requests using OpenAI\u0027s API and GitHub\u0027s API.\\n */\\n@@ ... @@\\n    println(\\\&quot; PR URL: $prUrl\\\&quot;)\\n}\\n\\n/**\\n * Parses a GitHub pull request URL and extracts the owner, repo, and PR number\\n */\\nprivate fun parseGitHubPrUrl(prUrl: String): GitHubPrUrlComponents {\\n    val urlParts \u003d prUrl.split(\\\&quot;/\\\&quot;)\\n    if (urlParts.size \u003c 7 || !prUrl.contains(\\\&quot;github.com\\\&quot;)) {\\n        throw IllegalArgumentException(\\\&quot;Invalid GitHub PR URL format\\\&quot;)\\n    }\\n\\n    return GitHubPrUrlComponents(\\n        owner \u003d urlParts[3],\\n        repo \u003d urlParts[4],\\n        prNumber \u003d urlParts[6]\\n    )\\n}\\n\\nfun updatePrBody(prUrl: String, filledPrBody :String, githubApiKey: String) {\\n    val (owner, repo, prNumber) \u003d parseGitHubPrUrl(prUrl)\\n    val apiUrl \u003d \\\&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\\\&quot;\\n\\n    try {\\n@@ ... @@\\n}\\n\\nprivate fun fetchDiffContent(prUrl: String, githubApiKey: String): String {\\n    // Extract owner, repo, and PR number from the PR URL\\n    // Example URL: https://github.com/owner/repo/pull/123\\n    val (owner, repo, prNumber) \u003d parseGitHubPrUrl(prUrl)\\n\\n    // GitHub API endpoint for PR diff\\n    val apiUrl \u003d \\\&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\\\&quot;\\n\\n    val request \u003d Request.Builder()\\n@@ ... @@\\n}\\n\\nprivate fun getPrBody(prUrl: String, githubApiKey: String): String {\\n    val (owner, repo, prNumber) \u003d parseGitHubPrUrl(prUrl)\\n\\n    val prBody \u003d try {\\n        val request \u003d Request.Builder()\\n            .url(\\\&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\\\&quot;)\\n@@ ... @@\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;toolu_bdrk_01XeQyKYuiMPuCt8gTMdNdtv&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -9,4 +9,13 @@\n \n /**\n+ * Data class to hold GitHub PR URL components\n+ */\n+data class GitHubPrUrlComponents(\n+    val owner: String,\n+    val repo: String,\n+    val prNumber: String\n+)\n+\n+/**\n  * PR Filler: A tool to help fill out pull requests using OpenAI\u0027s API and GitHub\u0027s API.\n  */\n@@ -70,13 +79,5 @@\n \n fun updatePrBody(prUrl: String, filledPrBody :String, githubApiKey: String) {\n-    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n-    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n-        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n-    }\n-\n-    val owner \u003d urlParts[3]\n-    val repo \u003d urlParts[4]\n-    val prNumber \u003d urlParts[6]\n-\n+    val (owner, repo, prNumber) \u003d parseGitHubPrUrl(prUrl)\n     val apiUrl \u003d \&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;\n \n@@ -165,7 +166,8 @@\n     .build()\n \n-private fun fetchDiffContent(prUrl: String, githubApiKey: String): String {\n-    // Extract owner, repo, and PR number from the PR URL\n-    // Example URL: https://github.com/owner/repo/pull/123\n+/**\n+ * Parses a GitHub pull request URL and extracts the owner, repo, and PR number\n+ */\n+private fun parseGitHubPrUrl(prUrl: String): GitHubPrUrlComponents {\n     val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n     if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n@@ -173,8 +175,16 @@\n     }\n \n-    val owner \u003d urlParts[3]\n-    val repo \u003d urlParts[4]\n-    val prNumber \u003d urlParts[6]\n+    return GitHubPrUrlComponents(\n+        owner \u003d urlParts[3],\n+        repo \u003d urlParts[4],\n+        prNumber \u003d urlParts[6]\n+    )\n+}\n \n+private fun fetchDiffContent(prUrl: String, githubApiKey: String): String {\n+    // Extract owner, repo, and PR number from the PR URL\n+    // Example URL: https://github.com/owner/repo/pull/123\n+    val (owner, repo, prNumber) \u003d parseGitHubPrUrl(prUrl)\n+\n     // GitHub API endpoint for PR diff\n     val apiUrl \u003d \&quot;https://api.github.com/repos/$owner/$repo/pulls/$prNumber\&quot;\n@@ -201,13 +211,6 @@\n \n private fun getPrBody(prUrl: String, githubApiKey: String): String {\n-    val urlParts \u003d prUrl.split(\&quot;/\&quot;)\n-    if (urlParts.size \u003c 7 || !prUrl.contains(\&quot;github.com\&quot;)) {\n-        throw IllegalArgumentException(\&quot;Invalid GitHub PR URL format\&quot;)\n-    }\n+    val (owner, repo, prNumber) \u003d parseGitHubPrUrl(prUrl)\n \n-    val owner \u003d urlParts[3]\n-    val repo \u003d urlParts[4]\n-    val prNumber \u003d urlParts[6]\n-\n     val prBody \u003d try {\n         val request \u003d Request.Builder()\n```\n\nThe edit was successful with no linter errors.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\nI\u0027ve refactored the duplicate URL parsing code that was repeated in three different functions. The refactoring included:\n\n1. Created a data class `GitHubPrUrlComponents` to hold the extracted URL components (owner, repo, and PR number)\n\n2. Added a new helper function `parseGitHubPrUrl()` that:\n   - Takes a GitHub PR URL as input\n   - Validates the URL format\n   - Extracts the necessary components\n   - Returns an instance of `GitHubPrUrlComponents`\n\n3. Updated these three functions to use the new helper function:\n   - `updatePrBody`\n   - `fetchDiffContent`\n   - `getPrBody`\n\nThis refactoring improves code maintainability by centralizing the URL parsing logic in one place. If the GitHub URL format changes in the future, you\u0027ll only need to update one function instead of three separate implementations.&quot;}]}]}" />
      </map>
    </option>
  </component>
</project>